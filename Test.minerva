class Node<T>(var value: T, var next: Node | null) {}

class List<T>() {
    var head: Node | null = null;
    var size = 0;


    function add(value: T) => {
        this.head = Node<T>(value, this.head);
    };

    function traverse(current: Node, func: (T)=>Any): null => {
            var next = current.next;
            func(current.value);

            typematch(next) {
                Node => this.traverse(next, func);
                null => null;
            };
            null;
        };

    function iterate(func: (T)=>Any) => {
            var ptr = this.head;
            typematch(ptr) {
                Node =>this.traverse(ptr, func);
                else =>null;
            };
        };

};


var list = List<Int>();
list.add(4);
list.add(3);
list.add(5);
list.add(10);
list.add(12);
list.add(8);
list.iterate(function (num: Int) => {print num;});

var newList = List<String>();
newList.add("Hello");
newList.add("World!");
list.add(3);
newList.iterate(function (value: String) => {print value;});



