class Node<T>(var value: T, var next: Node<T> | null) {}

class List<T>() {
    var head: Node<T> | null = null;
    var size = 0;


    function add(value: T) => {
        this.head = Node<T>(value, this.head);
    };

    function traverse(current: Node<T>, func: (T)=>Any): null => {
            var next = current.next;
            func(current.value);

            typematch(next) {
                Node<T> => this.traverse(next, func);
                null => null;
            };
            null;
        };

    function iterate(func: (T)=>Any) => {
            var ptr = this.head;
            typematch(ptr) {
                Node<T> =>this.traverse(ptr, func);
                else =>null;
            };
        };

};


var list = List<Int>();
list.add(4);
list.add(3);
list.add(5);
list.add(10);
list.add(12);
list.add(8);
//list.iterate(function (num: Int) => {print num;});


var newList = List<String>();
newList.add("Hello");
newList.add("World!");
list.add(3);
//newList.iterate(function (value: String) => {print value;});



class Container<T>(var value: T) {}
var container = Container(3);
//print container.value+3;


function test<T>(value: T): T => value;

//print test(3) + 3;

var foo: List<String> = List<String>();
foo.add("2");

function singleTon<T>(value: T) => {
    var result = List<T>();
    result.add(value);
    result;
};

//singleTon<String>("Hello").iterate(function (value: String) => {print value;});


class LinkedList<T, G> extends List<T> {


}

var bleh = LinkedList<String, Int>();
bleh.add("2");


class Parent(var name: String) {
    function blah() => {
        print "hello";
    };

}
/*
class Child(name: String) extends Parent(name) {
    function blah() =>  {
        super.blah();
        print this.name;
    };

}

var child = Child("john");
child.blah();
*/