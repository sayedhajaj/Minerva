function foo(lambda: (Int)=>Int, param: Int) => lambda(param);

//print foo(function(num: Int) => num*2, 5);


class LinkedListNode(var item: Int, var next: LinkedListNode | null) {
};

class LinkedList {
    var head: LinkedListNode | null = null;
    var size = 0;

    function add(item: Int) => {
        this.head = LinkedListNode(item, this.head);
        this.size = this.size + 1;
    };


    function traverse(current: LinkedListNode, func: (Int)=>Any): null => {
        var next = current.next;
        func(current.item);

        typematch(next) {
            LinkedListNode => this.traverse(next, func);
            null => null;
        };
        null;
    };

    function iterate(func: (Int)=>Any) => {
        var ptr = this.head;
        typematch(ptr) {
            LinkedListNode =>this.traverse(ptr, func);
            else =>null;
        };


    };
};

var lst = LinkedList();
lst.add(4);
lst.add(3);
lst.add(5);
lst.add(10);
lst.add(12);
lst.add(8);

lst.iterate(function (num: Int) => {print num;});

