class Node<T>(var value: T, var next: Node<T> | null) {}

class LinkedListIterator<T>(var first: Node<T>|null) implements Iterator<T> {
    var current: Node<T> | null = this.first;

    function hasNext(): Boolean => {
        var current = this.current;

        typematch(current) {
            null => false;
            else => true;
        };
    };
    function next():T|null => {
        var current = this.current;

        var returnValue = typematch(current) {
            null=> null;
            Node<T> => current.value;
        };

        this.current = typematch(current) {
            null => null;
            Node<T> => current.next;
        };
        current = this.current;

        returnValue;
    };
}
class LinkedList<T> implements Iterable<T> {
    var head: Node<T> | null = null;
    var size: Int = 0;

    function isEmpty() => this.size == 0;

    function add(value: T) => {
            this.head = Node<T>(value, this.head);
            this.size = this.size + 1;
    };


    function iterator(): Iterator<T> => LinkedListIterator<T>(this.head);
};




function iterate<T>(iterable: Iterable<T>, code: (T)=>Any) => {
    var iterator = iterable.iterator();

    while(iterator.hasNext()) {
        var current = iterator.next();
        code(current);
    };
}

var lst = LinkedList<Int>();
lst.add(3);
lst.add(5);
lst.add(7);

iterate<Int>(lst, function(num: Int) => {var result = num*2; print result; result;});